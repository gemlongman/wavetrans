Prelucrarea Semnalelor - Tema 3 & 4
===================================

Descriere generala
------------------

Am incercat sa imbin toate cerintele din tema 3 si tema 4 intr-un singur
program care sa indeplineasca toate functiile. Operatiile efectuate se
pot alege prin parametri in linia de comanda. Programul rulat fara nici
un parametru va furniza o lista a optiunilor disponibile.

Functionalitatea implementata este cea de eliminare a zgomotului
folosind procedeul de "scadere spectrala" si de aplicare a unui
egalizator parametric.

Compilare si rulare
-------------------

Programul a fost scris si testat pe o platforma GNU/Linux i686, folosind
numai fisiere wave stereo cu esantioane pe 16 biti. Teoretic programul
suporta fisiere wave cu esantioane de 8 sau 16 biti si orice numar de
canale.

Nu am facut teste pe alte arhitecturi decat x86 si probabil sansele sa
functioneze sunt destul de mici. Exista functii dependente de
proprietati ale masinii, cum ar fi endianess si dimensiunea cuvintelor.
Portarea pe alte platforme ar presupune o modificare atenta a acestor
functii.

Compilarea se face cu un simplu "make". Pentru a vedea optiunile
disponibile, programul poate fi rulat fara nici un parametru:

$ ./wavetrans

Pentru fisierul folosit ca date de intrare pentru egalizator exista un
exemplu, equalizer.txt, in care este descris si formatul folosit.

Detalii despre implementare
---------------------------

Am incercat pe cat posibil sa folosesc cat mai putin calcul in virgula
mobila. Numerele complexe sunt reprezentate intr-o structura cu 2 membri
de tip "long long". Cei 2 membri reprezinta partea reala, respectiv
imaginara a numarului complex. In fiecare membru cel mai putin
semnificativi 16 biti sunt folositi ca parte fractionara (practic lucrez
in virgula fixa, pe intregi, virgula fiind pozitionata intre bitul de
rang 15 si cel de rang 16). Descrierea structurii si cateva macrouri se
gasesc in fisierul "complex.h".

Transformarea Fourier Discreta (si transformarea inversa) necesare
ambelor operatii de prelucrare (eliminare de zgomot si egalizare) sunt
implementate folosind o varianta optimizata a algoritmului de decimare
in timp. Detalii despre implementare si despre optimizarile efectuate se
gasesc in comentariile din fisierul "fft.c".

Fisierul "wave.c" contine functiile necesare conversiei esantioanelor
din formatul intern wave in vectori de numere complexe si inapoi. Aceste
functii sunt dependente de platforma deoarece presupun ca platforma este
little endian, la fel ca wave (lucru valabil pentru x86 dar nevalabil in
general).

Tot in "wave.c" exista rutina de calcul al functiei pondere (weight)
necesar pentru suprapunerea a 2 ferestre (functia D(n) descrisa in
enuntul temei).

Cea mai mare parte a codului se gaseste in fisierul principal
("wavetrans.c"). Aici este codul pentru transformarile in domeniul
frecventa, pentru codare / decodare riff si pentru impartirea pe
ferestre (framing) si reasamblare folosind functia pondere.

Functiile de transformare in domeniul frecventa au un antet generic,
format dintr-un pointer spre un context specific (contine datele
necesare transformarii respective, precalculate de alte functii),
dimensiunea problemei, numarul canalului pe care se aplica
transformarea si vectorul de numere complexe.

Functiile de transformare pentru cele 2 operatii sunt
trans_noise_reduction si respectiv trans_equalizer. Codul pentru
initializarea contextului necesar transformarii de eliminare a
zgomotului se gaseste in functia main intre liniile 417-460. Codul
pentru initializarea contextului necesar transformarii de egalizator se
gaseste in functia compute_equalizer_data.

Codul pentru impartirea in ferestre si reasamplare se gaseste in functia
main intre liniile 562-641. Inaintea acestui cod exista un comentariu
care explica in detaliu algoritmul folosit.


Radu Rendec
352 C2
                                                februarie 2005

罗马尼亚语：
3、4信号处理的主题。

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


一般的描述

------------------

我想所有的主题imbin 3和4的要求在一个主题完成所有的功能的程序。所进行的手术可以通过在命令行参数的选择。程序没有运行一个参数列表将提供一个可用的你的选择。

所有的功能是去除噪声利用“频谱和下降过程”的应用参数均衡器。

编译和运行

-------------------


编写了测试程序，GNU / Linux平台上使用i686，只有16波的立体匹配样本文件的字节。程序理论忍受波和样本文件的字节和8或16的任何数渠道。
我没有做测试，可能比其他的x86架构的机会工作是相当小的。存在函数依赖这辆车的性能，如字节存储顺序和文字大小。港区在其他平台上看这些需要修订的功能。



汇编做的一个简单的“make”。查看选项可用的程序可以运行，没有任何一个参数：

wavetrans。

文件作为输入数据有一个均衡器例如，在equalizer.txt所描述的格式，和使用。


实施细节

好几家

我试着尽可能少多少计算使用逗号家具。在一个复杂的数字代表2名结构“龙龙”型。两名分别是部分真实的，复杂的虚构的数字。至少在每个成员你使用的是16字节的重要fractionara（实际工作的一部分在固定的省略，省略了派之间，是有点排名排名第15，16）。它的结构描述和一些鲭鱼“complex.h找到的文件”。


离散傅里叶变换和反变换）的要求双方的手术处理（噪声消除和均衡）一个实施optimizata使用抽取算法在时间。optimizarile细节的实施和执行在评论中找到文件“fft.c”。

“wave.c包含必要的文件转换功能esantioanelor”内部的波矢量格式在复杂数字和回来。这些功能是依赖于平台的平台，是因为我想Little Endian，一样是真实的，但波（在x86无效一般）。


在“常规wave.c有计算功能的“权重（Weight）需要Windows函数叠加2（d（n）用依据问题）。


大部分的代码找到主文件（“wavetrans.c”）。这里的代码是在变换域编码/解码的频率段上的分配利用窗口（框架）和重组的权重函数。

傅立叶变换在频率域有一个通用的头，由指针到一个特定的背景资料（包括这些变化所需的其他功能，预先计算）

问题的大小，数量的信道上的应用复数和矢量变换。


傅立叶变换是两个手术_分别还原和噪声_跨跨_均衡器。代码初始化必要的语境的转换处理找到主要噪声函数417 460线之间。代码

语境的转换是必要的初始化均衡器发现在compute _日期函数_均衡器。


分配的代码在Windows和reasamplare找到函数主562～641线之间。在这个代码有一个评论在算法的详细使用说明。
